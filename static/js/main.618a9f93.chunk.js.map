{"version":3,"sources":["models/app.js","serviceWorker.js","index.js","router.js"],"names":["__webpack_exports__","namespace","state","isShowPlayer","song","artist","isPlay","reducers","setHistoryKey","_ref","keyword","payload","localStorage","setItem","Object","D_test_js_20190105_qq_music_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","getSong","_ref2","singer","forEach","name","showPlayer","cancelPlayer","setPlayState","_ref3","flag","Boolean","window","location","hostname","match","app","dva","history","createHistory","onError","e","dispatch","console","error","model","require","default","router","DashBoard","dynamic","component","__webpack_require__","then","bind","Player","Promise","all","Taoge","react_default","a","createElement","exact","path","start","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6LAAeA,EAAA,SACbC,UAAW,MACXC,MAAO,CACLC,cAAc,EACdC,KAAM,GACNC,OAAQ,GACRC,QAAQ,GAEVC,SAAU,CAERC,cAFQ,SAEMN,EAFNO,GAEmC,IAAXC,EAAWD,EAApBE,QAErB,OADAC,aAAaC,QAAQ,cAAeH,GAC7BI,OAAAC,EAAA,EAAAD,CAAA,GAAKZ,IAGdc,QAPQ,SAOAd,EAPAe,GAOoB,IAEpBb,EAFoBa,EAAXN,QAGTN,EAAWH,EAAXG,OAIN,OAHAD,EAAKc,OAAOC,QAAQ,SAAAD,GAClBb,EAASa,EAAOE,OAEXN,OAAAC,EAAA,EAAAD,CAAA,GAAKZ,EAAZ,CAAmBE,OAAMC,YAG3BgB,WAjBQ,SAiBGnB,GAET,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GAAKZ,EAAZ,CAAmBC,cAAc,KAGnCmB,aAtBQ,SAsBKpB,GACX,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GAAKZ,EAAZ,CAAmBC,cAAc,KAGnCoB,aA1BQ,SA0BKrB,EA1BLsB,GA0B+B,IAARC,EAAQD,EAAjBb,QACpB,OAAOG,OAAAC,EAAA,EAAAD,CAAA,GAAKZ,EAAZ,CAAmBI,OAAQmB,sICvBbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAMC,IAAI,CACdC,QAASC,MACTC,QAFc,SAENC,EAAGC,GACTC,QAAQC,MAAMH,MAQlBL,EAAIS,MAAMC,EAAQ,KAAgBC,SAGlCX,EAAIY,OCdW,SAAAlC,GAA2B,IAAhBwB,EAAgBxB,EAAhBwB,QAASF,EAAOtB,EAAPsB,IAa3Ba,EAAYC,IAAQ,CACxBd,MACAe,UAAW,kBAAMC,EAAAX,EAAA,GAAAY,KAAAD,EAAAE,KAAA,cAEbC,EAASL,IAAQ,CACrBd,MACAe,UAAW,kBAAMK,QAAAC,IAAA,CAAAL,EAAAX,EAAA,GAAAW,EAAAX,EAAA,KAAAY,KAAAD,EAAAE,KAAA,cAEbI,EAAQR,IAAQ,CACpBd,MACAe,UAAW,kBAAMC,EAAAX,EAAA,GAAAY,KAAAD,EAAAE,KAAA,cAEnB,OACEK,EAAAC,EAAAC,cAACb,EAAA,OAAD,CAAQV,QAASA,GACfqB,EAAAC,EAAAC,cAACb,EAAA,OAAD,KAIEW,EAAAC,EAAAC,cAACb,EAAA,MAAD,CAAOc,OAAK,EAACC,KAAK,UAAUZ,UAAWI,IACvCI,EAAAC,EAAAC,cAACb,EAAA,MAAD,CAAOc,OAAK,EAACC,KAAK,iBAAiBZ,UAAWO,IAC9CC,EAAAC,EAAAC,cAACb,EAAA,MAAD,CAAOG,UAAWF,QDhB1Bb,EAAI4B,MAAM,SDuGJ,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.618a9f93.chunk.js","sourcesContent":["export default {\r\n  namespace: 'app',\r\n  state: {\r\n    isShowPlayer: false, // 是否显示 player\r\n    song: {}, // 歌的信息\r\n    artist: '', // 歌的作者\r\n    isPlay: false // 是否播放\r\n  },\r\n  reducers: {\r\n    // 缓存搜索历史\r\n    setHistoryKey(state, { payload: keyword }) {\r\n      localStorage.setItem('HISTORY_KEY', keyword)\r\n      return { ...state }\r\n    },\r\n    // 获取歌曲\r\n    getSong(state, { payload }) {\r\n      // console.log('getSong: ', payload)\r\n      const song = payload\r\n      let { artist } = state\r\n      song.singer.forEach(singer => {\r\n        artist = singer.name\r\n      })\r\n      return { ...state, song, artist }\r\n    },\r\n    // 显示 player\r\n    showPlayer(state) {\r\n      // console.log('showPlayer')\r\n      return { ...state, isShowPlayer: true }\r\n    },\r\n    // 不显示 player\r\n    cancelPlayer(state) {\r\n      return { ...state, isShowPlayer: false }\r\n    },\r\n    // 播放状态(true/false)\r\n    setPlayState(state, { payload: flag }) {\r\n      return { ...state, isPlay: flag }\r\n    }\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import dva from 'dva'\r\nimport createHistory from 'history/createHashHistory'\r\nimport router from './router'\r\n\r\nimport './index.scss'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n// 1.Initialize\r\nconst app = dva({\r\n  history: createHistory(),\r\n  onError(e, dispatch) {\r\n    console.error(e)\r\n  }\r\n})\r\n\r\n// 2. Plugins\r\n// app.use({})\r\n\r\n// 3. Model\r\napp.model(require('./models/app').default)\r\n\r\n// 4.Router\r\napp.router(router)\r\n\r\n// 5. Start\r\napp.start('#root')\r\n\r\nserviceWorker.unregister()\r\n","import React from 'react'\r\nimport { Router, Route, Switch } from 'dva/router'\r\nimport dynamic from 'dva/dynamic'\r\n\r\n/* import RecommendList from './pages/recommend/recommend'\r\nimport RankList from './pages/rank/rank'\r\nimport Search from './pages/search/search'\r\nimport Player from './components/player/player' */\r\n\r\nexport default function({ history, app }) {\r\n  /*   const RecommendList = dynamic({\r\n    app,\r\n    component: () => import('./pages/recommend/recommend')\r\n  })\r\n  const RankList = dynamic({\r\n    app,\r\n    component: () => import('./pages/rank/rank')\r\n  })\r\n  const Search = dynamic({\r\n    app,\r\n    component: () => import('./pages/search/search')\r\n  }) */\r\n  const DashBoard = dynamic({\r\n    app,\r\n    component: () => import('./pages/dashboard/dashboard')\r\n  })\r\n  const Player = dynamic({\r\n    app,\r\n    component: () => import('./components/player/player')\r\n  })\r\n  const Taoge = dynamic({\r\n    app,\r\n    component: () => import('./pages/taoge/taoge')\r\n  })\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        {/* <Route exact path=\"/\" component={RecommendList} />\r\n        <Route exact path=\"/rank\" component={RankList} />\r\n        <Route exact path=\"/search\" component={Search} /> */}\r\n        <Route exact path=\"/player\" component={Player} />\r\n        <Route exact path=\"/taoge/:songid\" component={Taoge} />\r\n        <Route component={DashBoard} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n"],"sourceRoot":""}